[
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "socketio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socketio",
        "description": "socketio",
        "detail": "socketio",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "web",
        "importPath": "aiohttp",
        "description": "aiohttp",
        "isExtraImport": true,
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "BrowserUseAgent",
        "importPath": "browser_use_agent",
        "description": "browser_use_agent",
        "isExtraImport": true,
        "detail": "browser_use_agent",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "AgentState",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserContext",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContextConfig",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "importPath": "base_agent",
        "description": "base_agent",
        "isExtraImport": true,
        "detail": "base_agent",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "importPath": "base_agent",
        "description": "base_agent",
        "isExtraImport": true,
        "detail": "base_agent",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "openai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openai",
        "description": "openai",
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "AutomataOperator",
        "kind": 6,
        "importPath": "agent.app",
        "description": "agent.app",
        "peekOfCode": "class AutomataOperator:\n    def __init__(self):\n        self.sio = socketio.AsyncServer(\n            async_mode='aiohttp', \n            cors_allowed_origins='*'\n        )\n        self.app = web.Application()\n        self.sio.attach(self.app)\n        self.sessions = {}\n        self.app.router.add_get('/status', self.get_status)",
        "detail": "agent.app",
        "documentation": {}
    },
    {
        "label": "AGENT_CLASS",
        "kind": 5,
        "importPath": "agent.app",
        "description": "agent.app",
        "peekOfCode": "AGENT_CLASS = BrowserUseAgent\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nclass AutomataOperator:\n    def __init__(self):\n        self.sio = socketio.AsyncServer(\n            async_mode='aiohttp', \n            cors_allowed_origins='*'\n        )\n        self.app = web.Application()",
        "detail": "agent.app",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "agent.app",
        "description": "agent.app",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nclass AutomataOperator:\n    def __init__(self):\n        self.sio = socketio.AsyncServer(\n            async_mode='aiohttp', \n            cors_allowed_origins='*'\n        )\n        self.app = web.Application()\n        self.sio.attach(self.app)",
        "detail": "agent.app",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "kind": 6,
        "importPath": "agent.base_agent",
        "description": "agent.base_agent",
        "peekOfCode": "class BaseAgent(ABC):\n    def  __init__(self, task: str, initial_url: str = None):\n        self.task = task\n        self.initial_url = initial_url\n    @abstractmethod\n    async def init_agent(self) -> None:\n        pass\n    @abstractmethod\n    async def take_step(self) -> Tuple[bool, bool]:\n        pass",
        "detail": "agent.base_agent",
        "documentation": {}
    },
    {
        "label": "BrowserUseAgent",
        "kind": 6,
        "importPath": "agent.browser_use_agent",
        "description": "agent.browser_use_agent",
        "peekOfCode": "class BrowserUseAgent(BaseAgent):\n    def __init__(self, task: str, initial_url: str = None):\n        super().__init__(task, initial_url)\n        self.browser = None\n        self.browser_context = None\n        self.agent_state = None\n        self.agent = None\n    async def init_agent(self) -> None:\n        self.browser = Browser(\n            config=BrowserConfig(",
        "detail": "agent.browser_use_agent",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "agent.browser_use_agent",
        "description": "agent.browser_use_agent",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nclass BrowserUseAgent(BaseAgent):\n    def __init__(self, task: str, initial_url: str = None):\n        super().__init__(task, initial_url)\n        self.browser = None\n        self.browser_context = None\n        self.agent_state = None\n        self.agent = None\n    async def init_agent(self) -> None:",
        "detail": "agent.browser_use_agent",
        "documentation": {}
    },
    {
        "label": "OpenAICUAAgent",
        "kind": 6,
        "importPath": "agent.openai_cua_agent",
        "description": "agent.openai_cua_agent",
        "peekOfCode": "class OpenAICUAAgent(BaseAgent):\n    def __init__(self, task: str, initial_url: str = None):\n        super().__init__(task, initial_url)\n        self.client = openai.OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n        self.session_id = None\n        self.last_output = None\n    async def init_agent(self) -> None:\n        # Initialize any required state here\n        pass\n    async def take_step(self) -> Tuple[bool, bool]:",
        "detail": "agent.openai_cua_agent",
        "documentation": {}
    }
]